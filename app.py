import json
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from langchain.llms import OpenAI
from langchain.memory import ConversationBufferMemory
import pickle
import os

app = Flask(__name__)

# Retrieve the API key from the environment variable
openai_api_key = os.getenv('OPENAI_API_KEY')
if not openai_api_key:
    raise ValueError("No OPENAI_API_KEY set in environment variables")

llm = OpenAI(api_key=openai_api_key)

def save_memory(conversation_memory, file_path):
    with open(file_path, 'wb') as file:
        pickle.dump(conversation_memory, file)

def load_memory(file_path):
    try:
        with open(file_path, 'rb') as file:
            return pickle.load(file)
    except FileNotFoundError:
        return ConversationBufferMemory()

@app.route('/twilio/status', methods=['POST', 'GET'])
def twilio_delivery_status():
    # Extract the relevant information from the Twilio callback
    message_sid = request.form.get('MessageSid')
    status = request.form.get('MessageStatus')

    # Process the delivery status notification
    print(f"Message SID: {message_sid}, Status: {status}")

    # Respond with a 200 OK status to acknowledge receipt
    return '', 200

@app.route("/sms", methods=['GET', 'POST'])
def sms_reply():
    """Respond to incoming messages with a response generated by Langchain."""
    incoming_msg = request.values.get('Body', '').strip()
    sender_phone_number = request.values.get('From', '')

    # log
    print(f"Received message from {sender_phone_number}: {incoming_msg}")

    conversation_memory = load_memory(f"/var/data/{sender_phone_number}.pkl")

    # Add the incoming message to the conversation history
    conversation_memory.save_context({"input": incoming_msg}, {"output": ""})

    # Generate a response considering the conversation history
    history = conversation_memory.load_memory_variables({}).get('history', '')
    response_text = llm.generate([history + '\n' + incoming_msg], max_tokens=66)

    print(f"Generated response: {response_text.generations[0][0].text.strip()}")
    # Add the generated response to the conversation history
    conversation_memory.save_context({"input": incoming_msg}, {"output": response_text.generations[0][0].text.strip()})

    save_memory(conversation_memory, f"/var/data/{sender_phone_number}.pkl")
    # Start our TwiML response
    resp = MessagingResponse()

    # Correct way to extract text from LLMResult and use it in the response
    actual_text = response_text.generations[0][0].text.strip()

    # Use the actual text in the Twilio response
    resp.message(actual_text)

    print(f"Sending response: {actual_text}")

    return str(resp)

if __name__ == '__main__':
    app.run(debug=True)
