from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from langchain.llms import OpenAI
from langchain.memory import ConversationBufferMemory
import os

app = Flask(__name__)

# Memory storage for each phone number
memories = {}

# Retrieve the API key from the environment variable
openai_api_key = os.getenv('OPENAI_API_KEY')
if not openai_api_key:
    raise ValueError("No OPENAI_API_KEY set in environment variables")

llm = OpenAI(api_key=openai_api_key)

@app.route('/')
def hello_world():
    return 'Hello, World!'

@app.route('/twilio/status', methods=['POST', 'GET'])
def twilio_delivery_status():
    # Extract the relevant information from the Twilio callback
    message_sid = request.form.get('MessageSid')
    status = request.form.get('MessageStatus')

    # Process the delivery status notification
    print(f"Message SID: {message_sid}, Status: {status}")

    # Respond with a 200 OK status to acknowledge receipt
    return '', 200

@app.route("/sms", methods=['GET', 'POST'])
def sms_reply():
    """Respond to incoming messages with a response generated by Langchain."""
    incoming_msg = request.values.get('Body', '').strip()
    sender_phone_number = request.values.get('From', '')

    # Retrieve or initialize the memory for the sender
    if sender_phone_number not in memories:
        memories[sender_phone_number] = ConversationBufferMemory()

    conversation_memory = memories[sender_phone_number]

    # Add the incoming message to the conversation history
    conversation_memory.save_context({"input": incoming_msg}, {"output": ""})

    # Generate a response considering the conversation history
    history = conversation_memory.load_memory_variables({}).get('history', '')
    response_text = llm.generate([history + '\n' + incoming_msg], max_tokens=50)

    # Add the generated response to the conversation history
    conversation_memory.save_context({"input": incoming_msg}, {"output": response_text})

    # Start our TwiML response
    resp = MessagingResponse()

    # Add a message
    resp.message(response_text)

    return str(resp)

if __name__ == '__main__':
    app.run(debug=True)
